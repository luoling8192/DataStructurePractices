#include <iostream>#include <vector>using namespace std;struct BT {    int value;    int count;    BT *left;    BT *right;    BT(int i) : value(i), count(0), left(nullptr), right(nullptr) {}};BT *insert(BT *node, int value) {    if (!node)        return new BT(value);    if (value < node->value)        node->left = insert(node->left, value);    if (value > node->value)        node->right = insert(node->right, value);    if (value == node->value)        node->count++;    return node;}bool compare(BT *a, BT *b) {    if (!a || !b)        return true;    return a->value == b->value && compare(a->left, b->left) && compare(a->right, b->right);}int main() {    int N, L;    while(true) {        cin >> N;        if (N == 0)            break;        cin >> L;        BT *root = nullptr;        for (int i = 0; i < N; i++) {            int x;            cin >> x;            root = insert(root, x);        }        for (int i = 0; i < L; i++) {            BT *comp_root = nullptr;            for (int j = 0; j < N; j++) {                int x;                cin >> x;                comp_root = insert(comp_root, x);            }            compare(root, comp_root) ? cout << "Yes" << endl : cout << "No" << endl;        }    }    return 0;}